function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import objectReduce from 'fast-loops/lib/objectReduce';

import getNodeSibling from './getNodeSibling';

export default function createNode(attributes) {
  var targetDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  var sortMediaQuery = arguments[2];

  var head = targetDocument.head || {};
  var type = attributes.type,
      media = attributes.media,
      support = attributes.support;


  var node = targetDocument.createElement('style');
  node.setAttribute('data-fela-type', type);
  node.type = 'text/css';

  if (support) {
    node.setAttribute('data-fela-support', 'true');
  }

  if (media) {
    node.media = media;
  }

  var nodes = head.querySelectorAll('[data-fela-type]');
  var sibling = getNodeSibling([].concat(_toConsumableArray(nodes)), attributes, sortMediaQuery);

  if (sibling) {
    head.insertBefore(node, sibling);
  } else {
    head.appendChild(node);
  }

  return node;
}